{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport * as ProductActions from \"../actions/products.actions\";\nimport { catchError, map, of, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/products.service\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"@angular/router\";\nexport let ProductsEffects = /*#__PURE__*/(() => {\n  class ProductsEffects {\n    productService;\n    actions$;\n    route;\n    getProductsEffect$;\n    getProductsByIdEffect$;\n    createProductEffect$;\n    // searchProductsEffect$;\n    constructor(productService, actions$, route) {\n      this.productService = productService;\n      this.actions$ = actions$;\n      this.route = route;\n      this.getProductsEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductActions.GetProducts), switchMap(() => this.productService.get().pipe(map(response => {\n          return ProductActions.SetProducts({\n            products: response.body\n          });\n        }), catchError(error => of(ProductActions.SetProducts({\n          products: []\n        }))))));\n      });\n      this.getProductsByIdEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductActions.GetProductById), switchMap(action => this.productService.getById(action.id).pipe(map(response => {\n          return ProductActions.SetSelectedProduct({\n            product: response.body\n          });\n        }), catchError(error => of(ProductActions.SetSelectedProduct({\n          product: null\n        }))))));\n      });\n      this.createProductEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductActions.CreateProduct), switchMap(action => this.productService.create(action.product).pipe(map(response => {\n          this.route.navigate(['/admin/products/list']);\n          return ProductActions.SetSelectedProduct({\n            product: {\n              id: response.body,\n              ...action.product\n            }\n          });\n        }), catchError(error => of(ProductActions.SetSelectedProduct({\n          product: null\n        }))))));\n      });\n    }\n    static ɵfac = function ProductsEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProductsEffects)(i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductsEffects,\n      factory: ProductsEffects.ɵfac\n    });\n  }\n  return ProductsEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}