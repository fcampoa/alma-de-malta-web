{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport * as InventoryActions from \"../actions/inventory.actions\";\nimport { switchMap, map, catchError, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/inventory.service\";\nimport * as i3 from \"@angular/router\";\nexport let InventoryEffects = /*#__PURE__*/(() => {\n  class InventoryEffects {\n    actions$;\n    inventoryService;\n    router;\n    getInventoryEffect$;\n    getInventoryByIdEffect$;\n    createInventoryEffect$;\n    constructor(actions$, inventoryService, router) {\n      this.actions$ = actions$;\n      this.inventoryService = inventoryService;\n      this.router = router;\n      // This is where you would inject your store and effects to manage state\n      this.getInventoryEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(InventoryActions.GetInventoryMovements), switchMap(() => this.inventoryService.get().pipe(map(response => {\n          return InventoryActions.SetInventoryMovements({\n            inventoryMovements: response.body\n          });\n        }), catchError(error => of(InventoryActions.SetInventoryMovements({\n          inventoryMovements: []\n        }))))));\n      });\n      this.getInventoryByIdEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(InventoryActions.GetInventoryMovementById), switchMap(action => this.inventoryService.getById(action.id).pipe(map(response => {\n          return InventoryActions.SetSelectedInventoryMovement({\n            inventoryMovement: response.body\n          });\n        }), catchError(error => of(InventoryActions.SetSelectedInventoryMovement({\n          inventoryMovement: null\n        }))))));\n      });\n      this.createInventoryEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(InventoryActions.CreateInventoryMovement), switchMap(action => this.inventoryService.create(action.inventoryMovement).pipe(map(response => {\n          this.router.navigate(['/admin/inventory/list']);\n          return InventoryActions.SetSelectedInventoryMovement({\n            inventoryMovement: {\n              id: response.body,\n              ...action.inventoryMovement\n            }\n          });\n        }), catchError(error => of(InventoryActions.SetSelectedInventoryMovement({\n          inventoryMovement: null\n        }))))));\n      });\n    }\n    static ɵfac = function InventoryEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InventoryEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InventoryEffects,\n      factory: InventoryEffects.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return InventoryEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}